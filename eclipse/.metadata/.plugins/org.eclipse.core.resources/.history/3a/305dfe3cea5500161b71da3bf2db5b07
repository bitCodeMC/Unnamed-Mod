package com.bitCode.test;

import java.util.HashMap;
import java.util.Map;

import com.bitCode.test.items.Drain;
import com.bitCode.test.util.BlockCoord;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;

public class KeyInputHandler {
	private final Map<Integer, Map<BlockCoord, IFeeder>> perWorldChargers = new HashMap();
	@SubscribeEvent
	public void onKeyInput(InputEvent.KeyInputEvent event){
	
		if(KeyBindings.increase.isPressed() && Drain.radius <= testMod.drainRadius){
			Drain.radius++;
		
		}
		if(KeyBindings.decrease.isPressed() && Drain.radius >= 0){
			Drain.radius--;
		}
		
	}
	 @SubscribeEvent
	  public void onPlayerTick(TickEvent.PlayerTickEvent event)
	  {
	//	 event.player.
	  }
	  public void chargePlayersItems(EntityPlayer player)
	  {
	    Map<BlockCoord, IFeeder> chargers = getChargersForWorld(player.worldObj);
	    if (chargers.isEmpty()) {
	      return;
	    }
	    BlockCoord bc = new BlockCoord(player);
	    for (IFeeder capBank : chargers.values()) {
	      if ((capBank.isActive()) && (capBank.getLocation().getDistSq(bc) <= RANGE_SQ))
	      {
	        boolean done = chargeFromCapBank(player, capBank);
	        if (done) {
	          return;
	        }
	      }
	    }
	  }
	  private Map<BlockCoord, IFeeder> getChargersForWorld(World world)
	  {
	    Map<BlockCoord, IFeeder> res = (Map)this.perWorldChargers.get(Integer.valueOf(world.provider.getDimension()));
	    if (res == null)
	    {
	      res = new HashMap();
	      this.perWorldChargers.put(Integer.valueOf(world.provider.getDimension()), res);
	    }
	    return res;
	  }
}
